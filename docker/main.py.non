#!/usr/bin/env python3
import os
import cx_Oracle
from flask import Flask, render_template, request, Response, redirect, url_for

app = Flask(__name__)

# Environment Variables for Oracle Database Connectivity
user = os.environ['PYTHON_USERNAME']
password = os.environ['PYTHON_PASSWORD']
dsn = 'localhost/XEPDB1'  # Adjust this according to your Oracle service name

# Establish a connection pool
def create_connection_pool():
    cx_Oracle.init_oracle_client(lib_dir=os.environ.get("HOME")+"/instantclient_21_3") # Change the path according to your Oracle Instant Client directory
    pool = cx_Oracle.SessionPool(user, password, dsn, min=1, max=5, increment=1, encoding="UTF-8")
    return pool

pool = create_connection_pool()
print(pool)

# HTML Form Method to Create a New Employee
@app.route('/api/add_employee', methods=['GET', 'POST'])
def add_employee_form():
    # Require authentication for all requests
    auth = request.authorization
    if not auth or not check_auth(auth.username, auth.password):
        return authenticate()

    if request.method != 'POST':
        return render_template('add_employee.html')
    else:
        # Extract the employee data from the form
        name = request.form['name']
        email = request.form['email']
        department = request.form['department']

        # Insert the employee into the database
        with pool.acquire() as con:
            cursor = con.cursor()
            try:
                cursor.execute("""INSERT INTO employees (name, email, department)
                               VALUES (:bvname, :bvemail, :bvdepartment)""",
                            bvname=name, bvemail=email, bvdepartment=department)
                con.commit()
                # Return the ID of the new employee
                return redirect(url_for('get_all'))
            except cx_Oracle.Error as error:
                print('Error occurred:', error)
                return 'Error occurred while adding employee'

# HTML Method to Get a List of All Employees
@app.route('/api/getall')
def get_all():
    # Require authentication for all requests
    auth = request.authorization
    if not auth or not check_auth(auth.username, auth.password):
        return authenticate()

    with pool.acquire() as con:
        cursor = con.cursor()
        try:
            cursor.execute("SELECT * FROM employees")
            employees = [{'id': row[0], 'name': row[1], 'email': row[2], 'department': row[3]} for row in cursor]
            return render_template('get_employees.html', employees=employees)
        except cx_Oracle.Error as error:
            print('Error occurred:', error)
            return 'Error occurred while retrieving employees'

# Add other routes and functions as needed

if __name__ == '__main__':
    app.run(debug=True)

